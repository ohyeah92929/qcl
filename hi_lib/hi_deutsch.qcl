/* Define Oracle */

const fzero=(random()>=0.5);       // Define two random boolean
const bal=(random()>=0.5);       //   constants


/* Extra print procedures */

procedure printExpectedResult() {
  if (not fzero)  and (bal)     { print "f(0)=0, f(1)=1"; }
  if (fzero)      and (bal)     { print "f(0)=1, f(1)=0"; }
  if (fzero)      and (not bal) { print "f(0)=1, f(1)=1"; }
  if (not fzero)  and (not bal) { print "f(0)=0, f(1)=0"; }

  if (bal)  { print "Tossed result = Balanced"; }
  else      { print "Tossed result = Constant"; }
}

procedure printMeasuredResult(int m) {
  if m==1  { print "measured value =", m, "= Balanced"; }
  else     { print "measured value =", m, "= Constant"; }
}


/* Deutsch's Algorithm */
/*
 *   |0>  ----|H|----|    |----|H|----(/)
 *                   | Uf |
 *   |1>  ----|H|----|    |--
 *
 *
 *   Uf is the arbitrary function that maps input 0/1 to an output 0/1
 *
 *   (HxI)Uf(HxH)(|0>x|1>)  (x is tensor product here)
 *
 *   1) f(0)=0, f(1)=1  -> Balanced
 *      Uf = [[1,0,0,0], = |x> ----*----
 *            [0,1,0,0],           |
 *            [0,0,0,1],   |y> ---|X|---
 *            [0,0,1,0]]
 *
 *   2) f(0)=1, f(1)=0  -> Balanced
 *      Uf = [[0,1,0,0], = |x> ---------*----
 *            [1,0,0,0],                |
 *            [0,0,1,0],   |y> --|x|---|X|---
 *            [0,0,0,1]]
 *
 *   3) f(0)=1, f(1)=1  -> Constant
 *      Uf = [[0,1,0,0], = |x> ---------
 *            [1,0,0,0],           
 *            [0,0,0,1],   |y> ---|X|---
 *            [0,0,1,0]]
 *
 *   4) f(0)=0, f(1)=0  -> Constant
 *      Uf = [[1,0,0,0], = |x> ---------
 *            [0,1,0,0],           
 *            [0,0,1,0],   |y> ---------
 *            [0,0,0,1]]
 */

operator Uf(qureg x,qureg y) {
  if fzero  { Not(y); }
  if bal    { CNot(y,x); }
}

procedure deutsch() {              // Classical control structure
  qureg x[1];                      // allocate 2 qubits
  qureg y[1];
  int m;

  printExpectedResult();

  reset;
  Not(y);
  H(x & y);
  Uf(x, y);
  H(x);

  dump x;
  dump y;
  measure x, m;
  printMeasuredResult(m);
  dump;


  reset;
}


// One question though is the example code coded this in a 
// reverse way like it calculates the matrix
// Need to figure out how this coompiler works
